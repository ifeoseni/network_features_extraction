name: Extract Network Features from Selected CSVs (Manual)

on:
  workflow_dispatch:
    inputs:
      file1:
        description: "First CSV file path (e.g., http_status/file1.csv)"
        required: true
        default: "http_status/1.csv"
        type: string
      file2:
        description: "Second CSV file path (optional)"
        required: false
        default: "http_status/2.csv"
        type: string
      file3:
        description: "Third CSV file path (optional)"
        required: false
        default: "http_status/3.csv"
        type: string
      output_folder:
        description: "Output folder for network features (e.g., network_features)"
        required: true
        default: "network_features"
        type: string

jobs:
  run-network-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 350 # 5h 50m (safe limit under 6h)

    steps:
      - name: Checkout repository via SSH
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas cloudscraper beautifulsoup4 tldextract whois dnspython requests

      - name: Create output directory
        run: |
          mkdir -p "${{ github.event.inputs.output_folder }}"

      - name: Validate and Process Input Files
        id: process_files
        run: |
          declare -a input_files=("${{ github.event.inputs.file1 }}" "${{ github.event.inputs.file2 }}" "${{ github.event.inputs.file3 }}")
          valid_files=()
          for file in "${input_files[@]}"; do
            if [ -z "$file" ]; then
              continue
            fi
            if [ -f "$file" ]; then
              echo "‚úÖ Found input file: $file"
              valid_files+=("$file")
            else
              echo "::error::Input file not found: $file"
              exit 1
            fi
          done
          if [ ${#valid_files[@]} -eq 0 ]; then
            echo "::error::No valid input files provided."
            exit 1
          fi
          echo "Valid files to process: ${valid_files[*]}"
          echo "files_list=${valid_files[*]}" >> "$GITHUB_OUTPUT"

      - name: Run Network Feature Extraction
        run: |
          IFS=' ' read -r -a input_files <<< "${{ steps.process_files.outputs.files_list }}"
          OUTPUT_DIR="${{ github.event.inputs.output_folder }}"
          for input_csv in "${input_files[@]}"; do
            if [ -f "$input_csv" ]; then
              echo "üöÄ Processing: $input_csv"
              python network_feature_extractor.py --input "$input_csv" --output "$OUTPUT_DIR"
            else
              echo "::warning::Skipped missing file: $input_csv"
            fi
          done

      - name: Verify Output Files
        run: |
          OUTPUT_DIR="${{ github.event.inputs.output_folder }}"
          echo "üîç Checking output directory: $OUTPUT_DIR"
          if ls "$OUTPUT_DIR"/*.csv 1> /dev/null 2>&1; then
            for file in "$OUTPUT_DIR"/*.csv; do
              echo "‚úÖ Generated: $(basename "$file")"
              head -n1 "$file"
            done
          else
            echo "::warning::No output CSV files generated in $OUTPUT_DIR"
          fi

      - name: Commit and Push Network Features
        env:
          GIT_SSH_COMMAND: "ssh -i ${{ secrets.SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no"
        run: |
          git config user.name "Ifeoluwa Oseni"
          git config user.email "ifeoseni@gmail.com"

          OUTPUT_DIR="${{ github.event.inputs.output_folder }}"
          git add "$OUTPUT_DIR"/*.csv

          if ! git diff --cached --quiet; then
            git commit -m "feat: add extracted network features from selected files [skip ci]"
            echo "‚úÖ Committed network features to repo"
          else
            echo "‚û°Ô∏è  No new changes to commit"
            exit 0
          fi

          git remote set-url origin git@github.com:${{ github.repository }}.git
          git pull origin main --rebase || echo "‚ö†Ô∏è Rebase conflict? Skipping push (safe to retry)"
          git push origin main

          echo "üéâ Network features successfully pushed to the repository"
