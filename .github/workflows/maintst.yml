name: My Network Features (Manual Matrix with Artifacts)

on:
  workflow_dispatch:
    inputs:
      files:
        description: 'Comma-separated list of CSV files (e.g., http_status/1.csv,http_status/2.csv)'
        required: true
        type: string
      output_folder:
        description: 'Output folder for results (e.g., network_features)'
        required: true
        default: 'network_features'

jobs:
  validate-and-split:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository via SSH
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          fetch-depth: 0

      - name: Debug: List All CSV Files
        run: |
          echo "üîç Searching for all CSV files in the repository..."
          ALL_CSVS=$(find . -type f -name "*.csv" | sort)
          if [ -z "$ALL_CSVS" ]; then
            echo "::error::No CSV files found in the repository!"
            exit 1
          fi
          echo "$ALL_CSVS"
          echo "üìÇ Current directory: $(pwd)"

      - name: Install jq (JSON processor)
        run: sudo apt-get install -y jq

      - name: Parse and Validate Input Files
        id: set-matrix
        shell: bash
        run: |
          IFS=',' read -ra FILE_LIST <<< "${{ github.event.inputs.files }}"
          matrix_json='{"include": []}'
          valid_count=0

          for file in "${FILE_LIST[@]}"; do
            file=$(echo "$file" | xargs)  # trim whitespace
            if [ -z "$file" ]; then continue; fi

            if [ -f "$file" ]; then
              echo "‚úÖ Found input file: $file"
              output_file="${{ github.event.inputs.output_folder }}/$(basename "$file")"
              matrix_json=$(echo "$matrix_json" | jq --arg in "$file" --arg out "$output_file" \
                '.include += [{"input_file": $in, "output_file": $out}]')
              valid_count=$((valid_count + 1))
            else
              echo "::error::File not found: $file"
              echo "::error::Available files:"
              find . -type f -name "*.csv" | xargs -I{} echo "  - {}"
              exit 1
            fi
          done

          if [ $valid_count -eq 0 ]; then
            echo "::error::No valid input files provided."
            exit 1
          fi

          echo "matrix=$(echo "$matrix_json" | jq -c .)" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Generated matrix:"
          echo "$matrix_json" | jq

  run-network-analysis:
    needs: validate-and-split
    runs-on: ubuntu-latest
    timeout-minutes: 350
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.validate-and-split.outputs.matrix) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas aiohttp beautifulsoup4 tldextract whois dnspython requests cloudscraper

      - name: Create output directory
        run: |
          mkdir -p "$(dirname "${{ matrix.output_file }}")"

      - name: Run Network Feature Extraction
        run: |
          python network_feature_extractor.py \
            --input "${{ matrix.input_file }}" \
            --output "$(dirname "${{ matrix.output_file }}")"

      - name: Verify output
        run: |
          if [ -f "${{ matrix.output_file }}" ]; then
            echo "‚úÖ Generated: ${{ matrix.output_file }}"
            rows=$(wc -l < "${{ matrix.output_file }}")
            echo "üìä Total rows (including header): $((rows))"
          else
            echo "::error::Failed to generate ${{ matrix.output_file }}"
            exit 1
          fi

      - name: Upload Artifact (Per File)
        uses: actions/upload-artifact@v4
        with:
          name: network-feature-${{ matrix.input_file }}
          path: ${{ matrix.output_file }}

  upload-all-artifacts:
    needs: run-network-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/

      - name: List Artifacts
        run: |
          echo "üì¶ All extracted network features:"
          find artifacts/ -type f -name "*.csv" | xargs ls -la

      - name: Upload Combined Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-network-features
          path: artifacts/
          if-no-files-found: warn

  commit-results:
    needs: upload-all-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and commit
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          fetch-depth: 0

      - name: Add and commit network features
        env:
          GIT_SSH_COMMAND: "ssh -i ${{ secrets.SSH_PRIVATE_KEY }} -o StrictHostKeyChecking=no"
        run: |
          git config user.name "Ifeoluwa Oseni"
          git config user.email "ifeoseni@gmail.com"

          OUTPUT_DIR="${{ github.event.inputs.output_folder }}"
          if ls "$OUTPUT_DIR"/*.csv 1> /dev/null 2>&1; then
            git add "$OUTPUT_DIR"/*.csv
            if ! git diff --cached --quiet; then
              git commit -m "feat: add extracted network features [skip ci]"
              git pull origin main --rebase || echo "Rebase conflict? Safe to retry."
              git push origin main
              echo "‚úÖ Successfully pushed results to the repository"
            else
              echo "‚ÑπÔ∏è No changes to commit"
            fi
          else
            echo "‚ö†Ô∏è No CSV files found in $OUTPUT_DIR to commit."
